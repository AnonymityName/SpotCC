// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elasticcdc.proto

#include "elasticcdc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace elasticcdc {
PROTOBUF_CONSTEXPR ElasticcdcRequest::ElasticcdcRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_classify_request_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scale_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encode_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.frontend_id_)*/0u
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.channels_)*/0u
  , /*decltype(_impl_.cdc_infer_time_)*/0
  , /*decltype(_impl_.backup_infer_time_)*/0
  , /*decltype(_impl_.decode_time_)*/0
  , /*decltype(_impl_.end_signal_)*/false
  , /*decltype(_impl_.recompute_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ElasticcdcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ElasticcdcRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ElasticcdcRequestDefaultTypeInternal() {}
  union {
    ElasticcdcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ElasticcdcRequestDefaultTypeInternal _ElasticcdcRequest_default_instance_;
PROTOBUF_CONSTEXPR ElasticcdcReply::ElasticcdcReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_classify_reply_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reply_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.recompute_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ElasticcdcReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ElasticcdcReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ElasticcdcReplyDefaultTypeInternal() {}
  union {
    ElasticcdcReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ElasticcdcReplyDefaultTypeInternal _ElasticcdcReply_default_instance_;
}  // namespace elasticcdc
static ::_pb::Metadata file_level_metadata_elasticcdc_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_elasticcdc_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_elasticcdc_2eproto = nullptr;

const uint32_t TableStruct_elasticcdc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.image_classify_request_info_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.model_name_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.frontend_id_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.encode_type_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.cdc_infer_time_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.backup_infer_time_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.decode_time_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.end_signal_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcRequest, _impl_.recompute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcReply, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcReply, _impl_.image_classify_reply_info_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcReply, _impl_.reply_info_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcReply, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::elasticcdc::ElasticcdcReply, _impl_.recompute_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::elasticcdc::ElasticcdcRequest)},
  { 23, -1, -1, sizeof(::elasticcdc::ElasticcdcReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::elasticcdc::_ElasticcdcRequest_default_instance_._instance,
  &::elasticcdc::_ElasticcdcReply_default_instance_._instance,
};

const char descriptor_table_protodef_elasticcdc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020elasticcdc.proto\022\nelasticcdc\"\337\002\n\021Elast"
  "iccdcRequest\022\014\n\004name\030\001 \001(\t\022#\n\033image_clas"
  "sify_request_info\030\002 \001(\t\022\022\n\nmodel_name\030\003 "
  "\001(\t\022\r\n\005scale\030\004 \001(\t\022\020\n\010filename\030\005 \001(\t\022\n\n\002"
  "id\030\006 \001(\003\022\023\n\013frontend_id\030\007 \001(\r\022\014\n\004data\030\010 "
  "\001(\014\022\r\n\005width\030\t \001(\r\022\016\n\006height\030\n \001(\r\022\020\n\010ch"
  "annels\030\013 \001(\r\022\023\n\013encode_type\030\014 \001(\t\022\026\n\016cdc"
  "_infer_time\030\r \001(\001\022\031\n\021backup_infer_time\030\016"
  " \001(\001\022\023\n\013decode_time\030\017 \001(\001\022\022\n\nend_signal\030"
  "\020 \001(\010\022\021\n\trecompute\030\021 \001(\010\"x\n\017ElasticcdcRe"
  "ply\022\017\n\007message\030\001 \001(\t\022!\n\031image_classify_r"
  "eply_info\030\002 \001(\t\022\022\n\nreply_info\030\003 \001(\014\022\n\n\002i"
  "d\030\004 \001(\003\022\021\n\trecompute\030\005 \001(\0102\265\001\n\021Elasticcd"
  "cService\022S\n\017DataTransStream\022\035.elasticcdc"
  ".ElasticcdcRequest\032\033.elasticcdc.Elasticc"
  "dcReply\"\000(\0010\001\022K\n\013IsPreempted\022\035.elasticcd"
  "c.ElasticcdcRequest\032\033.elasticcdc.Elastic"
  "cdcReply\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_elasticcdc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_elasticcdc_2eproto = {
    false, false, 698, descriptor_table_protodef_elasticcdc_2eproto,
    "elasticcdc.proto",
    &descriptor_table_elasticcdc_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_elasticcdc_2eproto::offsets,
    file_level_metadata_elasticcdc_2eproto, file_level_enum_descriptors_elasticcdc_2eproto,
    file_level_service_descriptors_elasticcdc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_elasticcdc_2eproto_getter() {
  return &descriptor_table_elasticcdc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_elasticcdc_2eproto(&descriptor_table_elasticcdc_2eproto);
namespace elasticcdc {

// ===================================================================

class ElasticcdcRequest::_Internal {
 public:
};

ElasticcdcRequest::ElasticcdcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:elasticcdc.ElasticcdcRequest)
}
ElasticcdcRequest::ElasticcdcRequest(const ElasticcdcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ElasticcdcRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.image_classify_request_info_){}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.encode_type_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.frontend_id_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.channels_){}
    , decltype(_impl_.cdc_infer_time_){}
    , decltype(_impl_.backup_infer_time_){}
    , decltype(_impl_.decode_time_){}
    , decltype(_impl_.end_signal_){}
    , decltype(_impl_.recompute_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.image_classify_request_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_classify_request_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_classify_request_info().empty()) {
    _this->_impl_.image_classify_request_info_.Set(from._internal_image_classify_request_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_name().empty()) {
    _this->_impl_.model_name_.Set(from._internal_model_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.scale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_scale().empty()) {
    _this->_impl_.scale_.Set(from._internal_scale(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encode_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encode_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encode_type().empty()) {
    _this->_impl_.encode_type_.Set(from._internal_encode_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.recompute_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.recompute_));
  // @@protoc_insertion_point(copy_constructor:elasticcdc.ElasticcdcRequest)
}

inline void ElasticcdcRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.image_classify_request_info_){}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.encode_type_){}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.frontend_id_){0u}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.channels_){0u}
    , decltype(_impl_.cdc_infer_time_){0}
    , decltype(_impl_.backup_infer_time_){0}
    , decltype(_impl_.decode_time_){0}
    , decltype(_impl_.end_signal_){false}
    , decltype(_impl_.recompute_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.image_classify_request_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_classify_request_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encode_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encode_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ElasticcdcRequest::~ElasticcdcRequest() {
  // @@protoc_insertion_point(destructor:elasticcdc.ElasticcdcRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ElasticcdcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.image_classify_request_info_.Destroy();
  _impl_.model_name_.Destroy();
  _impl_.scale_.Destroy();
  _impl_.filename_.Destroy();
  _impl_.data_.Destroy();
  _impl_.encode_type_.Destroy();
}

void ElasticcdcRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ElasticcdcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:elasticcdc.ElasticcdcRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.image_classify_request_info_.ClearToEmpty();
  _impl_.model_name_.ClearToEmpty();
  _impl_.scale_.ClearToEmpty();
  _impl_.filename_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.encode_type_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.recompute_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.recompute_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElasticcdcRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "elasticcdc.ElasticcdcRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string image_classify_request_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image_classify_request_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "elasticcdc.ElasticcdcRequest.image_classify_request_info"));
        } else
          goto handle_unusual;
        continue;
      // string model_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "elasticcdc.ElasticcdcRequest.model_name"));
        } else
          goto handle_unusual;
        continue;
      // string scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_scale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "elasticcdc.ElasticcdcRequest.scale"));
        } else
          goto handle_unusual;
        continue;
      // string filename = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "elasticcdc.ElasticcdcRequest.filename"));
        } else
          goto handle_unusual;
        continue;
      // int64 id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 frontend_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.frontend_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channels = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string encode_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_encode_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "elasticcdc.ElasticcdcRequest.encode_type"));
        } else
          goto handle_unusual;
        continue;
      // double cdc_infer_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.cdc_infer_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double backup_infer_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.backup_infer_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double decode_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.decode_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool end_signal = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.end_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool recompute = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.recompute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ElasticcdcRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:elasticcdc.ElasticcdcRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "elasticcdc.ElasticcdcRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string image_classify_request_info = 2;
  if (!this->_internal_image_classify_request_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_classify_request_info().data(), static_cast<int>(this->_internal_image_classify_request_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "elasticcdc.ElasticcdcRequest.image_classify_request_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image_classify_request_info(), target);
  }

  // string model_name = 3;
  if (!this->_internal_model_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "elasticcdc.ElasticcdcRequest.model_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_name(), target);
  }

  // string scale = 4;
  if (!this->_internal_scale().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scale().data(), static_cast<int>(this->_internal_scale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "elasticcdc.ElasticcdcRequest.scale");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_scale(), target);
  }

  // string filename = 5;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "elasticcdc.ElasticcdcRequest.filename");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_filename(), target);
  }

  // int64 id = 6;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_id(), target);
  }

  // uint32 frontend_id = 7;
  if (this->_internal_frontend_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_frontend_id(), target);
  }

  // bytes data = 8;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_data(), target);
  }

  // uint32 width = 9;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_width(), target);
  }

  // uint32 height = 10;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_height(), target);
  }

  // uint32 channels = 11;
  if (this->_internal_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_channels(), target);
  }

  // string encode_type = 12;
  if (!this->_internal_encode_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encode_type().data(), static_cast<int>(this->_internal_encode_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "elasticcdc.ElasticcdcRequest.encode_type");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_encode_type(), target);
  }

  // double cdc_infer_time = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cdc_infer_time = this->_internal_cdc_infer_time();
  uint64_t raw_cdc_infer_time;
  memcpy(&raw_cdc_infer_time, &tmp_cdc_infer_time, sizeof(tmp_cdc_infer_time));
  if (raw_cdc_infer_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_cdc_infer_time(), target);
  }

  // double backup_infer_time = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backup_infer_time = this->_internal_backup_infer_time();
  uint64_t raw_backup_infer_time;
  memcpy(&raw_backup_infer_time, &tmp_backup_infer_time, sizeof(tmp_backup_infer_time));
  if (raw_backup_infer_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_backup_infer_time(), target);
  }

  // double decode_time = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_time = this->_internal_decode_time();
  uint64_t raw_decode_time;
  memcpy(&raw_decode_time, &tmp_decode_time, sizeof(tmp_decode_time));
  if (raw_decode_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_decode_time(), target);
  }

  // bool end_signal = 16;
  if (this->_internal_end_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_end_signal(), target);
  }

  // bool recompute = 17;
  if (this->_internal_recompute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_recompute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elasticcdc.ElasticcdcRequest)
  return target;
}

size_t ElasticcdcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:elasticcdc.ElasticcdcRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string image_classify_request_info = 2;
  if (!this->_internal_image_classify_request_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_classify_request_info());
  }

  // string model_name = 3;
  if (!this->_internal_model_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  // string scale = 4;
  if (!this->_internal_scale().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scale());
  }

  // string filename = 5;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // bytes data = 8;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string encode_type = 12;
  if (!this->_internal_encode_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encode_type());
  }

  // int64 id = 6;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // uint32 frontend_id = 7;
  if (this->_internal_frontend_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frontend_id());
  }

  // uint32 width = 9;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 10;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 channels = 11;
  if (this->_internal_channels() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channels());
  }

  // double cdc_infer_time = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cdc_infer_time = this->_internal_cdc_infer_time();
  uint64_t raw_cdc_infer_time;
  memcpy(&raw_cdc_infer_time, &tmp_cdc_infer_time, sizeof(tmp_cdc_infer_time));
  if (raw_cdc_infer_time != 0) {
    total_size += 1 + 8;
  }

  // double backup_infer_time = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backup_infer_time = this->_internal_backup_infer_time();
  uint64_t raw_backup_infer_time;
  memcpy(&raw_backup_infer_time, &tmp_backup_infer_time, sizeof(tmp_backup_infer_time));
  if (raw_backup_infer_time != 0) {
    total_size += 1 + 8;
  }

  // double decode_time = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_time = this->_internal_decode_time();
  uint64_t raw_decode_time;
  memcpy(&raw_decode_time, &tmp_decode_time, sizeof(tmp_decode_time));
  if (raw_decode_time != 0) {
    total_size += 1 + 8;
  }

  // bool end_signal = 16;
  if (this->_internal_end_signal() != 0) {
    total_size += 2 + 1;
  }

  // bool recompute = 17;
  if (this->_internal_recompute() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ElasticcdcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ElasticcdcRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ElasticcdcRequest::GetClassData() const { return &_class_data_; }


void ElasticcdcRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ElasticcdcRequest*>(&to_msg);
  auto& from = static_cast<const ElasticcdcRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:elasticcdc.ElasticcdcRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_image_classify_request_info().empty()) {
    _this->_internal_set_image_classify_request_info(from._internal_image_classify_request_info());
  }
  if (!from._internal_model_name().empty()) {
    _this->_internal_set_model_name(from._internal_model_name());
  }
  if (!from._internal_scale().empty()) {
    _this->_internal_set_scale(from._internal_scale());
  }
  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_encode_type().empty()) {
    _this->_internal_set_encode_type(from._internal_encode_type());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_frontend_id() != 0) {
    _this->_internal_set_frontend_id(from._internal_frontend_id());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_channels() != 0) {
    _this->_internal_set_channels(from._internal_channels());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cdc_infer_time = from._internal_cdc_infer_time();
  uint64_t raw_cdc_infer_time;
  memcpy(&raw_cdc_infer_time, &tmp_cdc_infer_time, sizeof(tmp_cdc_infer_time));
  if (raw_cdc_infer_time != 0) {
    _this->_internal_set_cdc_infer_time(from._internal_cdc_infer_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backup_infer_time = from._internal_backup_infer_time();
  uint64_t raw_backup_infer_time;
  memcpy(&raw_backup_infer_time, &tmp_backup_infer_time, sizeof(tmp_backup_infer_time));
  if (raw_backup_infer_time != 0) {
    _this->_internal_set_backup_infer_time(from._internal_backup_infer_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_time = from._internal_decode_time();
  uint64_t raw_decode_time;
  memcpy(&raw_decode_time, &tmp_decode_time, sizeof(tmp_decode_time));
  if (raw_decode_time != 0) {
    _this->_internal_set_decode_time(from._internal_decode_time());
  }
  if (from._internal_end_signal() != 0) {
    _this->_internal_set_end_signal(from._internal_end_signal());
  }
  if (from._internal_recompute() != 0) {
    _this->_internal_set_recompute(from._internal_recompute());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ElasticcdcRequest::CopyFrom(const ElasticcdcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elasticcdc.ElasticcdcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElasticcdcRequest::IsInitialized() const {
  return true;
}

void ElasticcdcRequest::InternalSwap(ElasticcdcRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_classify_request_info_, lhs_arena,
      &other->_impl_.image_classify_request_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_name_, lhs_arena,
      &other->_impl_.model_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scale_, lhs_arena,
      &other->_impl_.scale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encode_type_, lhs_arena,
      &other->_impl_.encode_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElasticcdcRequest, _impl_.recompute_)
      + sizeof(ElasticcdcRequest::_impl_.recompute_)
      - PROTOBUF_FIELD_OFFSET(ElasticcdcRequest, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ElasticcdcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_elasticcdc_2eproto_getter, &descriptor_table_elasticcdc_2eproto_once,
      file_level_metadata_elasticcdc_2eproto[0]);
}

// ===================================================================

class ElasticcdcReply::_Internal {
 public:
};

ElasticcdcReply::ElasticcdcReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:elasticcdc.ElasticcdcReply)
}
ElasticcdcReply::ElasticcdcReply(const ElasticcdcReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ElasticcdcReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.image_classify_reply_info_){}
    , decltype(_impl_.reply_info_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.recompute_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.image_classify_reply_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_classify_reply_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_classify_reply_info().empty()) {
    _this->_impl_.image_classify_reply_info_.Set(from._internal_image_classify_reply_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reply_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reply_info().empty()) {
    _this->_impl_.reply_info_.Set(from._internal_reply_info(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.recompute_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.recompute_));
  // @@protoc_insertion_point(copy_constructor:elasticcdc.ElasticcdcReply)
}

inline void ElasticcdcReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.image_classify_reply_info_){}
    , decltype(_impl_.reply_info_){}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.recompute_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.image_classify_reply_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_classify_reply_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reply_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ElasticcdcReply::~ElasticcdcReply() {
  // @@protoc_insertion_point(destructor:elasticcdc.ElasticcdcReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ElasticcdcReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.image_classify_reply_info_.Destroy();
  _impl_.reply_info_.Destroy();
}

void ElasticcdcReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ElasticcdcReply::Clear() {
// @@protoc_insertion_point(message_clear_start:elasticcdc.ElasticcdcReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.image_classify_reply_info_.ClearToEmpty();
  _impl_.reply_info_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.recompute_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.recompute_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElasticcdcReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "elasticcdc.ElasticcdcReply.message"));
        } else
          goto handle_unusual;
        continue;
      // string image_classify_reply_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image_classify_reply_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "elasticcdc.ElasticcdcReply.image_classify_reply_info"));
        } else
          goto handle_unusual;
        continue;
      // bytes reply_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reply_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool recompute = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.recompute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ElasticcdcReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:elasticcdc.ElasticcdcReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "elasticcdc.ElasticcdcReply.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // string image_classify_reply_info = 2;
  if (!this->_internal_image_classify_reply_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_classify_reply_info().data(), static_cast<int>(this->_internal_image_classify_reply_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "elasticcdc.ElasticcdcReply.image_classify_reply_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image_classify_reply_info(), target);
  }

  // bytes reply_info = 3;
  if (!this->_internal_reply_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_reply_info(), target);
  }

  // int64 id = 4;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_id(), target);
  }

  // bool recompute = 5;
  if (this->_internal_recompute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_recompute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elasticcdc.ElasticcdcReply)
  return target;
}

size_t ElasticcdcReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:elasticcdc.ElasticcdcReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string image_classify_reply_info = 2;
  if (!this->_internal_image_classify_reply_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_classify_reply_info());
  }

  // bytes reply_info = 3;
  if (!this->_internal_reply_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reply_info());
  }

  // int64 id = 4;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // bool recompute = 5;
  if (this->_internal_recompute() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ElasticcdcReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ElasticcdcReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ElasticcdcReply::GetClassData() const { return &_class_data_; }


void ElasticcdcReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ElasticcdcReply*>(&to_msg);
  auto& from = static_cast<const ElasticcdcReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:elasticcdc.ElasticcdcReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_image_classify_reply_info().empty()) {
    _this->_internal_set_image_classify_reply_info(from._internal_image_classify_reply_info());
  }
  if (!from._internal_reply_info().empty()) {
    _this->_internal_set_reply_info(from._internal_reply_info());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_recompute() != 0) {
    _this->_internal_set_recompute(from._internal_recompute());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ElasticcdcReply::CopyFrom(const ElasticcdcReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elasticcdc.ElasticcdcReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElasticcdcReply::IsInitialized() const {
  return true;
}

void ElasticcdcReply::InternalSwap(ElasticcdcReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_classify_reply_info_, lhs_arena,
      &other->_impl_.image_classify_reply_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reply_info_, lhs_arena,
      &other->_impl_.reply_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElasticcdcReply, _impl_.recompute_)
      + sizeof(ElasticcdcReply::_impl_.recompute_)
      - PROTOBUF_FIELD_OFFSET(ElasticcdcReply, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ElasticcdcReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_elasticcdc_2eproto_getter, &descriptor_table_elasticcdc_2eproto_once,
      file_level_metadata_elasticcdc_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace elasticcdc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::elasticcdc::ElasticcdcRequest*
Arena::CreateMaybeMessage< ::elasticcdc::ElasticcdcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::elasticcdc::ElasticcdcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::elasticcdc::ElasticcdcReply*
Arena::CreateMaybeMessage< ::elasticcdc::ElasticcdcReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::elasticcdc::ElasticcdcReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
