// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elasticcdc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_elasticcdc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_elasticcdc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_elasticcdc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_elasticcdc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_elasticcdc_2eproto;
namespace elasticcdc {
class ElasticcdcReply;
struct ElasticcdcReplyDefaultTypeInternal;
extern ElasticcdcReplyDefaultTypeInternal _ElasticcdcReply_default_instance_;
class ElasticcdcRequest;
struct ElasticcdcRequestDefaultTypeInternal;
extern ElasticcdcRequestDefaultTypeInternal _ElasticcdcRequest_default_instance_;
}  // namespace elasticcdc
PROTOBUF_NAMESPACE_OPEN
template<> ::elasticcdc::ElasticcdcReply* Arena::CreateMaybeMessage<::elasticcdc::ElasticcdcReply>(Arena*);
template<> ::elasticcdc::ElasticcdcRequest* Arena::CreateMaybeMessage<::elasticcdc::ElasticcdcRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace elasticcdc {

// ===================================================================

class ElasticcdcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticcdc.ElasticcdcRequest) */ {
 public:
  inline ElasticcdcRequest() : ElasticcdcRequest(nullptr) {}
  ~ElasticcdcRequest() override;
  explicit PROTOBUF_CONSTEXPR ElasticcdcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ElasticcdcRequest(const ElasticcdcRequest& from);
  ElasticcdcRequest(ElasticcdcRequest&& from) noexcept
    : ElasticcdcRequest() {
    *this = ::std::move(from);
  }

  inline ElasticcdcRequest& operator=(const ElasticcdcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElasticcdcRequest& operator=(ElasticcdcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ElasticcdcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ElasticcdcRequest* internal_default_instance() {
    return reinterpret_cast<const ElasticcdcRequest*>(
               &_ElasticcdcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ElasticcdcRequest& a, ElasticcdcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ElasticcdcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElasticcdcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ElasticcdcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ElasticcdcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ElasticcdcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ElasticcdcRequest& from) {
    ElasticcdcRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElasticcdcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticcdc.ElasticcdcRequest";
  }
  protected:
  explicit ElasticcdcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kImageClassifyRequestInfoFieldNumber = 2,
    kModelNameFieldNumber = 3,
    kScaleFieldNumber = 4,
    kFilenameFieldNumber = 5,
    kDataFieldNumber = 8,
    kEncodeTypeFieldNumber = 12,
    kIdFieldNumber = 6,
    kFrontendIdFieldNumber = 7,
    kWidthFieldNumber = 9,
    kHeightFieldNumber = 10,
    kChannelsFieldNumber = 11,
    kCdcInferTimeFieldNumber = 13,
    kBackupInferTimeFieldNumber = 14,
    kDecodeTimeFieldNumber = 15,
    kEndSignalFieldNumber = 16,
    kRecomputeFieldNumber = 17,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image_classify_request_info = 2;
  void clear_image_classify_request_info();
  const std::string& image_classify_request_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_classify_request_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_classify_request_info();
  PROTOBUF_NODISCARD std::string* release_image_classify_request_info();
  void set_allocated_image_classify_request_info(std::string* image_classify_request_info);
  private:
  const std::string& _internal_image_classify_request_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_classify_request_info(const std::string& value);
  std::string* _internal_mutable_image_classify_request_info();
  public:

  // string model_name = 3;
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // string scale = 4;
  void clear_scale();
  const std::string& scale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scale();
  PROTOBUF_NODISCARD std::string* release_scale();
  void set_allocated_scale(std::string* scale);
  private:
  const std::string& _internal_scale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scale(const std::string& value);
  std::string* _internal_mutable_scale();
  public:

  // string filename = 5;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes data = 8;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string encode_type = 12;
  void clear_encode_type();
  const std::string& encode_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encode_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encode_type();
  PROTOBUF_NODISCARD std::string* release_encode_type();
  void set_allocated_encode_type(std::string* encode_type);
  private:
  const std::string& _internal_encode_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encode_type(const std::string& value);
  std::string* _internal_mutable_encode_type();
  public:

  // int64 id = 6;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // uint32 frontend_id = 7;
  void clear_frontend_id();
  uint32_t frontend_id() const;
  void set_frontend_id(uint32_t value);
  private:
  uint32_t _internal_frontend_id() const;
  void _internal_set_frontend_id(uint32_t value);
  public:

  // uint32 width = 9;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 height = 10;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // uint32 channels = 11;
  void clear_channels();
  uint32_t channels() const;
  void set_channels(uint32_t value);
  private:
  uint32_t _internal_channels() const;
  void _internal_set_channels(uint32_t value);
  public:

  // double cdc_infer_time = 13;
  void clear_cdc_infer_time();
  double cdc_infer_time() const;
  void set_cdc_infer_time(double value);
  private:
  double _internal_cdc_infer_time() const;
  void _internal_set_cdc_infer_time(double value);
  public:

  // double backup_infer_time = 14;
  void clear_backup_infer_time();
  double backup_infer_time() const;
  void set_backup_infer_time(double value);
  private:
  double _internal_backup_infer_time() const;
  void _internal_set_backup_infer_time(double value);
  public:

  // double decode_time = 15;
  void clear_decode_time();
  double decode_time() const;
  void set_decode_time(double value);
  private:
  double _internal_decode_time() const;
  void _internal_set_decode_time(double value);
  public:

  // bool end_signal = 16;
  void clear_end_signal();
  bool end_signal() const;
  void set_end_signal(bool value);
  private:
  bool _internal_end_signal() const;
  void _internal_set_end_signal(bool value);
  public:

  // bool recompute = 17;
  void clear_recompute();
  bool recompute() const;
  void set_recompute(bool value);
  private:
  bool _internal_recompute() const;
  void _internal_set_recompute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:elasticcdc.ElasticcdcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_classify_request_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scale_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encode_type_;
    int64_t id_;
    uint32_t frontend_id_;
    uint32_t width_;
    uint32_t height_;
    uint32_t channels_;
    double cdc_infer_time_;
    double backup_infer_time_;
    double decode_time_;
    bool end_signal_;
    bool recompute_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_elasticcdc_2eproto;
};
// -------------------------------------------------------------------

class ElasticcdcReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticcdc.ElasticcdcReply) */ {
 public:
  inline ElasticcdcReply() : ElasticcdcReply(nullptr) {}
  ~ElasticcdcReply() override;
  explicit PROTOBUF_CONSTEXPR ElasticcdcReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ElasticcdcReply(const ElasticcdcReply& from);
  ElasticcdcReply(ElasticcdcReply&& from) noexcept
    : ElasticcdcReply() {
    *this = ::std::move(from);
  }

  inline ElasticcdcReply& operator=(const ElasticcdcReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElasticcdcReply& operator=(ElasticcdcReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ElasticcdcReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ElasticcdcReply* internal_default_instance() {
    return reinterpret_cast<const ElasticcdcReply*>(
               &_ElasticcdcReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ElasticcdcReply& a, ElasticcdcReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ElasticcdcReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElasticcdcReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ElasticcdcReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ElasticcdcReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ElasticcdcReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ElasticcdcReply& from) {
    ElasticcdcReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElasticcdcReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticcdc.ElasticcdcReply";
  }
  protected:
  explicit ElasticcdcReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kImageClassifyReplyInfoFieldNumber = 2,
    kReplyInfoFieldNumber = 3,
    kIdFieldNumber = 4,
    kRecomputeFieldNumber = 5,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string image_classify_reply_info = 2;
  void clear_image_classify_reply_info();
  const std::string& image_classify_reply_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_classify_reply_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_classify_reply_info();
  PROTOBUF_NODISCARD std::string* release_image_classify_reply_info();
  void set_allocated_image_classify_reply_info(std::string* image_classify_reply_info);
  private:
  const std::string& _internal_image_classify_reply_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_classify_reply_info(const std::string& value);
  std::string* _internal_mutable_image_classify_reply_info();
  public:

  // bytes reply_info = 3;
  void clear_reply_info();
  const std::string& reply_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_info();
  PROTOBUF_NODISCARD std::string* release_reply_info();
  void set_allocated_reply_info(std::string* reply_info);
  private:
  const std::string& _internal_reply_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_info(const std::string& value);
  std::string* _internal_mutable_reply_info();
  public:

  // int64 id = 4;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // bool recompute = 5;
  void clear_recompute();
  bool recompute() const;
  void set_recompute(bool value);
  private:
  bool _internal_recompute() const;
  void _internal_set_recompute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:elasticcdc.ElasticcdcReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_classify_reply_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_info_;
    int64_t id_;
    bool recompute_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_elasticcdc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ElasticcdcRequest

// string name = 1;
inline void ElasticcdcRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ElasticcdcRequest::name() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElasticcdcRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.name)
}
inline std::string* ElasticcdcRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:elasticcdc.ElasticcdcRequest.name)
  return _s;
}
inline const std::string& ElasticcdcRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ElasticcdcRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ElasticcdcRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ElasticcdcRequest::release_name() {
  // @@protoc_insertion_point(field_release:elasticcdc.ElasticcdcRequest.name)
  return _impl_.name_.Release();
}
inline void ElasticcdcRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:elasticcdc.ElasticcdcRequest.name)
}

// string image_classify_request_info = 2;
inline void ElasticcdcRequest::clear_image_classify_request_info() {
  _impl_.image_classify_request_info_.ClearToEmpty();
}
inline const std::string& ElasticcdcRequest::image_classify_request_info() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.image_classify_request_info)
  return _internal_image_classify_request_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElasticcdcRequest::set_image_classify_request_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_classify_request_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.image_classify_request_info)
}
inline std::string* ElasticcdcRequest::mutable_image_classify_request_info() {
  std::string* _s = _internal_mutable_image_classify_request_info();
  // @@protoc_insertion_point(field_mutable:elasticcdc.ElasticcdcRequest.image_classify_request_info)
  return _s;
}
inline const std::string& ElasticcdcRequest::_internal_image_classify_request_info() const {
  return _impl_.image_classify_request_info_.Get();
}
inline void ElasticcdcRequest::_internal_set_image_classify_request_info(const std::string& value) {
  
  _impl_.image_classify_request_info_.Set(value, GetArenaForAllocation());
}
inline std::string* ElasticcdcRequest::_internal_mutable_image_classify_request_info() {
  
  return _impl_.image_classify_request_info_.Mutable(GetArenaForAllocation());
}
inline std::string* ElasticcdcRequest::release_image_classify_request_info() {
  // @@protoc_insertion_point(field_release:elasticcdc.ElasticcdcRequest.image_classify_request_info)
  return _impl_.image_classify_request_info_.Release();
}
inline void ElasticcdcRequest::set_allocated_image_classify_request_info(std::string* image_classify_request_info) {
  if (image_classify_request_info != nullptr) {
    
  } else {
    
  }
  _impl_.image_classify_request_info_.SetAllocated(image_classify_request_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_classify_request_info_.IsDefault()) {
    _impl_.image_classify_request_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:elasticcdc.ElasticcdcRequest.image_classify_request_info)
}

// string model_name = 3;
inline void ElasticcdcRequest::clear_model_name() {
  _impl_.model_name_.ClearToEmpty();
}
inline const std::string& ElasticcdcRequest::model_name() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElasticcdcRequest::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.model_name)
}
inline std::string* ElasticcdcRequest::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:elasticcdc.ElasticcdcRequest.model_name)
  return _s;
}
inline const std::string& ElasticcdcRequest::_internal_model_name() const {
  return _impl_.model_name_.Get();
}
inline void ElasticcdcRequest::_internal_set_model_name(const std::string& value) {
  
  _impl_.model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ElasticcdcRequest::_internal_mutable_model_name() {
  
  return _impl_.model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ElasticcdcRequest::release_model_name() {
  // @@protoc_insertion_point(field_release:elasticcdc.ElasticcdcRequest.model_name)
  return _impl_.model_name_.Release();
}
inline void ElasticcdcRequest::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  _impl_.model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:elasticcdc.ElasticcdcRequest.model_name)
}

// string scale = 4;
inline void ElasticcdcRequest::clear_scale() {
  _impl_.scale_.ClearToEmpty();
}
inline const std::string& ElasticcdcRequest::scale() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.scale)
  return _internal_scale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElasticcdcRequest::set_scale(ArgT0&& arg0, ArgT... args) {
 
 _impl_.scale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.scale)
}
inline std::string* ElasticcdcRequest::mutable_scale() {
  std::string* _s = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:elasticcdc.ElasticcdcRequest.scale)
  return _s;
}
inline const std::string& ElasticcdcRequest::_internal_scale() const {
  return _impl_.scale_.Get();
}
inline void ElasticcdcRequest::_internal_set_scale(const std::string& value) {
  
  _impl_.scale_.Set(value, GetArenaForAllocation());
}
inline std::string* ElasticcdcRequest::_internal_mutable_scale() {
  
  return _impl_.scale_.Mutable(GetArenaForAllocation());
}
inline std::string* ElasticcdcRequest::release_scale() {
  // @@protoc_insertion_point(field_release:elasticcdc.ElasticcdcRequest.scale)
  return _impl_.scale_.Release();
}
inline void ElasticcdcRequest::set_allocated_scale(std::string* scale) {
  if (scale != nullptr) {
    
  } else {
    
  }
  _impl_.scale_.SetAllocated(scale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scale_.IsDefault()) {
    _impl_.scale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:elasticcdc.ElasticcdcRequest.scale)
}

// string filename = 5;
inline void ElasticcdcRequest::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& ElasticcdcRequest::filename() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElasticcdcRequest::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.filename)
}
inline std::string* ElasticcdcRequest::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:elasticcdc.ElasticcdcRequest.filename)
  return _s;
}
inline const std::string& ElasticcdcRequest::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void ElasticcdcRequest::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* ElasticcdcRequest::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* ElasticcdcRequest::release_filename() {
  // @@protoc_insertion_point(field_release:elasticcdc.ElasticcdcRequest.filename)
  return _impl_.filename_.Release();
}
inline void ElasticcdcRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:elasticcdc.ElasticcdcRequest.filename)
}

// int64 id = 6;
inline void ElasticcdcRequest::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t ElasticcdcRequest::_internal_id() const {
  return _impl_.id_;
}
inline int64_t ElasticcdcRequest::id() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.id)
  return _internal_id();
}
inline void ElasticcdcRequest::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void ElasticcdcRequest::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.id)
}

// uint32 frontend_id = 7;
inline void ElasticcdcRequest::clear_frontend_id() {
  _impl_.frontend_id_ = 0u;
}
inline uint32_t ElasticcdcRequest::_internal_frontend_id() const {
  return _impl_.frontend_id_;
}
inline uint32_t ElasticcdcRequest::frontend_id() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.frontend_id)
  return _internal_frontend_id();
}
inline void ElasticcdcRequest::_internal_set_frontend_id(uint32_t value) {
  
  _impl_.frontend_id_ = value;
}
inline void ElasticcdcRequest::set_frontend_id(uint32_t value) {
  _internal_set_frontend_id(value);
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.frontend_id)
}

// bytes data = 8;
inline void ElasticcdcRequest::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ElasticcdcRequest::data() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElasticcdcRequest::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.data)
}
inline std::string* ElasticcdcRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:elasticcdc.ElasticcdcRequest.data)
  return _s;
}
inline const std::string& ElasticcdcRequest::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ElasticcdcRequest::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ElasticcdcRequest::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ElasticcdcRequest::release_data() {
  // @@protoc_insertion_point(field_release:elasticcdc.ElasticcdcRequest.data)
  return _impl_.data_.Release();
}
inline void ElasticcdcRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:elasticcdc.ElasticcdcRequest.data)
}

// uint32 width = 9;
inline void ElasticcdcRequest::clear_width() {
  _impl_.width_ = 0u;
}
inline uint32_t ElasticcdcRequest::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t ElasticcdcRequest::width() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.width)
  return _internal_width();
}
inline void ElasticcdcRequest::_internal_set_width(uint32_t value) {
  
  _impl_.width_ = value;
}
inline void ElasticcdcRequest::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.width)
}

// uint32 height = 10;
inline void ElasticcdcRequest::clear_height() {
  _impl_.height_ = 0u;
}
inline uint32_t ElasticcdcRequest::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t ElasticcdcRequest::height() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.height)
  return _internal_height();
}
inline void ElasticcdcRequest::_internal_set_height(uint32_t value) {
  
  _impl_.height_ = value;
}
inline void ElasticcdcRequest::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.height)
}

// uint32 channels = 11;
inline void ElasticcdcRequest::clear_channels() {
  _impl_.channels_ = 0u;
}
inline uint32_t ElasticcdcRequest::_internal_channels() const {
  return _impl_.channels_;
}
inline uint32_t ElasticcdcRequest::channels() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.channels)
  return _internal_channels();
}
inline void ElasticcdcRequest::_internal_set_channels(uint32_t value) {
  
  _impl_.channels_ = value;
}
inline void ElasticcdcRequest::set_channels(uint32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.channels)
}

// string encode_type = 12;
inline void ElasticcdcRequest::clear_encode_type() {
  _impl_.encode_type_.ClearToEmpty();
}
inline const std::string& ElasticcdcRequest::encode_type() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.encode_type)
  return _internal_encode_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElasticcdcRequest::set_encode_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encode_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.encode_type)
}
inline std::string* ElasticcdcRequest::mutable_encode_type() {
  std::string* _s = _internal_mutable_encode_type();
  // @@protoc_insertion_point(field_mutable:elasticcdc.ElasticcdcRequest.encode_type)
  return _s;
}
inline const std::string& ElasticcdcRequest::_internal_encode_type() const {
  return _impl_.encode_type_.Get();
}
inline void ElasticcdcRequest::_internal_set_encode_type(const std::string& value) {
  
  _impl_.encode_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ElasticcdcRequest::_internal_mutable_encode_type() {
  
  return _impl_.encode_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ElasticcdcRequest::release_encode_type() {
  // @@protoc_insertion_point(field_release:elasticcdc.ElasticcdcRequest.encode_type)
  return _impl_.encode_type_.Release();
}
inline void ElasticcdcRequest::set_allocated_encode_type(std::string* encode_type) {
  if (encode_type != nullptr) {
    
  } else {
    
  }
  _impl_.encode_type_.SetAllocated(encode_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encode_type_.IsDefault()) {
    _impl_.encode_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:elasticcdc.ElasticcdcRequest.encode_type)
}

// double cdc_infer_time = 13;
inline void ElasticcdcRequest::clear_cdc_infer_time() {
  _impl_.cdc_infer_time_ = 0;
}
inline double ElasticcdcRequest::_internal_cdc_infer_time() const {
  return _impl_.cdc_infer_time_;
}
inline double ElasticcdcRequest::cdc_infer_time() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.cdc_infer_time)
  return _internal_cdc_infer_time();
}
inline void ElasticcdcRequest::_internal_set_cdc_infer_time(double value) {
  
  _impl_.cdc_infer_time_ = value;
}
inline void ElasticcdcRequest::set_cdc_infer_time(double value) {
  _internal_set_cdc_infer_time(value);
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.cdc_infer_time)
}

// double backup_infer_time = 14;
inline void ElasticcdcRequest::clear_backup_infer_time() {
  _impl_.backup_infer_time_ = 0;
}
inline double ElasticcdcRequest::_internal_backup_infer_time() const {
  return _impl_.backup_infer_time_;
}
inline double ElasticcdcRequest::backup_infer_time() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.backup_infer_time)
  return _internal_backup_infer_time();
}
inline void ElasticcdcRequest::_internal_set_backup_infer_time(double value) {
  
  _impl_.backup_infer_time_ = value;
}
inline void ElasticcdcRequest::set_backup_infer_time(double value) {
  _internal_set_backup_infer_time(value);
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.backup_infer_time)
}

// double decode_time = 15;
inline void ElasticcdcRequest::clear_decode_time() {
  _impl_.decode_time_ = 0;
}
inline double ElasticcdcRequest::_internal_decode_time() const {
  return _impl_.decode_time_;
}
inline double ElasticcdcRequest::decode_time() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.decode_time)
  return _internal_decode_time();
}
inline void ElasticcdcRequest::_internal_set_decode_time(double value) {
  
  _impl_.decode_time_ = value;
}
inline void ElasticcdcRequest::set_decode_time(double value) {
  _internal_set_decode_time(value);
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.decode_time)
}

// bool end_signal = 16;
inline void ElasticcdcRequest::clear_end_signal() {
  _impl_.end_signal_ = false;
}
inline bool ElasticcdcRequest::_internal_end_signal() const {
  return _impl_.end_signal_;
}
inline bool ElasticcdcRequest::end_signal() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.end_signal)
  return _internal_end_signal();
}
inline void ElasticcdcRequest::_internal_set_end_signal(bool value) {
  
  _impl_.end_signal_ = value;
}
inline void ElasticcdcRequest::set_end_signal(bool value) {
  _internal_set_end_signal(value);
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.end_signal)
}

// bool recompute = 17;
inline void ElasticcdcRequest::clear_recompute() {
  _impl_.recompute_ = false;
}
inline bool ElasticcdcRequest::_internal_recompute() const {
  return _impl_.recompute_;
}
inline bool ElasticcdcRequest::recompute() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.recompute)
  return _internal_recompute();
}
inline void ElasticcdcRequest::_internal_set_recompute(bool value) {
  
  _impl_.recompute_ = value;
}
inline void ElasticcdcRequest::set_recompute(bool value) {
  _internal_set_recompute(value);
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.recompute)
}

// -------------------------------------------------------------------

// ElasticcdcReply

// string message = 1;
inline void ElasticcdcReply::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ElasticcdcReply::message() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcReply.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElasticcdcReply::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcReply.message)
}
inline std::string* ElasticcdcReply::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:elasticcdc.ElasticcdcReply.message)
  return _s;
}
inline const std::string& ElasticcdcReply::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ElasticcdcReply::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ElasticcdcReply::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ElasticcdcReply::release_message() {
  // @@protoc_insertion_point(field_release:elasticcdc.ElasticcdcReply.message)
  return _impl_.message_.Release();
}
inline void ElasticcdcReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:elasticcdc.ElasticcdcReply.message)
}

// string image_classify_reply_info = 2;
inline void ElasticcdcReply::clear_image_classify_reply_info() {
  _impl_.image_classify_reply_info_.ClearToEmpty();
}
inline const std::string& ElasticcdcReply::image_classify_reply_info() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcReply.image_classify_reply_info)
  return _internal_image_classify_reply_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElasticcdcReply::set_image_classify_reply_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_classify_reply_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcReply.image_classify_reply_info)
}
inline std::string* ElasticcdcReply::mutable_image_classify_reply_info() {
  std::string* _s = _internal_mutable_image_classify_reply_info();
  // @@protoc_insertion_point(field_mutable:elasticcdc.ElasticcdcReply.image_classify_reply_info)
  return _s;
}
inline const std::string& ElasticcdcReply::_internal_image_classify_reply_info() const {
  return _impl_.image_classify_reply_info_.Get();
}
inline void ElasticcdcReply::_internal_set_image_classify_reply_info(const std::string& value) {
  
  _impl_.image_classify_reply_info_.Set(value, GetArenaForAllocation());
}
inline std::string* ElasticcdcReply::_internal_mutable_image_classify_reply_info() {
  
  return _impl_.image_classify_reply_info_.Mutable(GetArenaForAllocation());
}
inline std::string* ElasticcdcReply::release_image_classify_reply_info() {
  // @@protoc_insertion_point(field_release:elasticcdc.ElasticcdcReply.image_classify_reply_info)
  return _impl_.image_classify_reply_info_.Release();
}
inline void ElasticcdcReply::set_allocated_image_classify_reply_info(std::string* image_classify_reply_info) {
  if (image_classify_reply_info != nullptr) {
    
  } else {
    
  }
  _impl_.image_classify_reply_info_.SetAllocated(image_classify_reply_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_classify_reply_info_.IsDefault()) {
    _impl_.image_classify_reply_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:elasticcdc.ElasticcdcReply.image_classify_reply_info)
}

// bytes reply_info = 3;
inline void ElasticcdcReply::clear_reply_info() {
  _impl_.reply_info_.ClearToEmpty();
}
inline const std::string& ElasticcdcReply::reply_info() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcReply.reply_info)
  return _internal_reply_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElasticcdcReply::set_reply_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reply_info_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcReply.reply_info)
}
inline std::string* ElasticcdcReply::mutable_reply_info() {
  std::string* _s = _internal_mutable_reply_info();
  // @@protoc_insertion_point(field_mutable:elasticcdc.ElasticcdcReply.reply_info)
  return _s;
}
inline const std::string& ElasticcdcReply::_internal_reply_info() const {
  return _impl_.reply_info_.Get();
}
inline void ElasticcdcReply::_internal_set_reply_info(const std::string& value) {
  
  _impl_.reply_info_.Set(value, GetArenaForAllocation());
}
inline std::string* ElasticcdcReply::_internal_mutable_reply_info() {
  
  return _impl_.reply_info_.Mutable(GetArenaForAllocation());
}
inline std::string* ElasticcdcReply::release_reply_info() {
  // @@protoc_insertion_point(field_release:elasticcdc.ElasticcdcReply.reply_info)
  return _impl_.reply_info_.Release();
}
inline void ElasticcdcReply::set_allocated_reply_info(std::string* reply_info) {
  if (reply_info != nullptr) {
    
  } else {
    
  }
  _impl_.reply_info_.SetAllocated(reply_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reply_info_.IsDefault()) {
    _impl_.reply_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:elasticcdc.ElasticcdcReply.reply_info)
}

// int64 id = 4;
inline void ElasticcdcReply::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t ElasticcdcReply::_internal_id() const {
  return _impl_.id_;
}
inline int64_t ElasticcdcReply::id() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcReply.id)
  return _internal_id();
}
inline void ElasticcdcReply::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void ElasticcdcReply::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcReply.id)
}

// bool recompute = 5;
inline void ElasticcdcReply::clear_recompute() {
  _impl_.recompute_ = false;
}
inline bool ElasticcdcReply::_internal_recompute() const {
  return _impl_.recompute_;
}
inline bool ElasticcdcReply::recompute() const {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcReply.recompute)
  return _internal_recompute();
}
inline void ElasticcdcReply::_internal_set_recompute(bool value) {
  
  _impl_.recompute_ = value;
}
inline void ElasticcdcReply::set_recompute(bool value) {
  _internal_set_recompute(value);
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcReply.recompute)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace elasticcdc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_elasticcdc_2eproto
